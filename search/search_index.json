{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Welcome to the t2linux wiki! This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website . Warnings \u00b6 Kernel versions 5.8.x and 5.9.x are considered in-development builds and should not be used due to issues from within the kernel and the init system. Currently well tested are the older 5.7.19 as well as the currently stable 5.10.12 and 5.10.17 . It is highly recommended that you use the stock Apple boot manager for all distributions, other boot managers like rEFInd have been known to cause issues. Notable Resources \u00b6 In general you can find most of the people involved on the Linux on T2 Macs (2018+) Discord Server , making it probably the most helpful and important resource of all. Distributions \u00b6 Different distributions are maintained by different people in their own repositories. Still more detailed or just different documentation about certain distributions might also be found here Ubuntu https://github.com/marcosfad/mbp-ubuntu Fedora https://github.com/mikeeq/mbp-fedora Arch https://github.com/aunali1/linux-mbp-arch Manjaro https://github.com/JPyke3/mbp-manjaro Kernel Modules \u00b6 Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support. MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv Guides and similar \u00b6 Note that if you are using one of the distributions listed above you should follow their install guides rather than the ones listed under this section. However they might still be important to gain a better general picture or to help with specific issues. State of Linux on the MacBook Pro https://github.com/Dunedan/mbp-2016-linux List of Mac Model Identifiers on everymac.com Using Luks with the intergrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock Patching and compiling a Kernel for T2 Devices https://github.com/DimitriDokuchaev/PatchingAndBuildingLinuxKernel Adding macOS like screenshot shortcuts to KDE Plasma https://gist.github.com/networkException/5a68299accc1872749c86301c1449690 Disable thermal throttling (better performance but higher temperatures) https://github.com/yyearth/turnoff-BD-PROCHOT Experimental wifi support for mbp 16,1 https://github.com/jamlam/mbp-16.1-linux-wifi Outdated Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3 Ubuntu on 2016 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4 Notable Contributors \u00b6 aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1 MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2 mikeeq (Fedora) https://github.com/mikeeq marcosfad (Ubuntu) https://github.com/marcosfad JPyke3 (Manjaro) https://github.com/JPyke3 ... and many more","title":"Home"},{"location":"#introduction","text":"Welcome to the t2linux wiki! This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website .","title":"Introduction"},{"location":"#warnings","text":"Kernel versions 5.8.x and 5.9.x are considered in-development builds and should not be used due to issues from within the kernel and the init system. Currently well tested are the older 5.7.19 as well as the currently stable 5.10.12 and 5.10.17 . It is highly recommended that you use the stock Apple boot manager for all distributions, other boot managers like rEFInd have been known to cause issues.","title":"Warnings"},{"location":"#notable-resources","text":"In general you can find most of the people involved on the Linux on T2 Macs (2018+) Discord Server , making it probably the most helpful and important resource of all.","title":"Notable Resources"},{"location":"#distributions","text":"Different distributions are maintained by different people in their own repositories. Still more detailed or just different documentation about certain distributions might also be found here Ubuntu https://github.com/marcosfad/mbp-ubuntu Fedora https://github.com/mikeeq/mbp-fedora Arch https://github.com/aunali1/linux-mbp-arch Manjaro https://github.com/JPyke3/mbp-manjaro","title":"Distributions"},{"location":"#kernel-modules","text":"Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support. MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv","title":"Kernel Modules"},{"location":"#guides-and-similar","text":"Note that if you are using one of the distributions listed above you should follow their install guides rather than the ones listed under this section. However they might still be important to gain a better general picture or to help with specific issues. State of Linux on the MacBook Pro https://github.com/Dunedan/mbp-2016-linux List of Mac Model Identifiers on everymac.com Using Luks with the intergrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock Patching and compiling a Kernel for T2 Devices https://github.com/DimitriDokuchaev/PatchingAndBuildingLinuxKernel Adding macOS like screenshot shortcuts to KDE Plasma https://gist.github.com/networkException/5a68299accc1872749c86301c1449690 Disable thermal throttling (better performance but higher temperatures) https://github.com/yyearth/turnoff-BD-PROCHOT Experimental wifi support for mbp 16,1 https://github.com/jamlam/mbp-16.1-linux-wifi Outdated Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3 Ubuntu on 2016 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4","title":"Guides and similar"},{"location":"#notable-contributors","text":"aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1 MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2 mikeeq (Fedora) https://github.com/mikeeq marcosfad (Ubuntu) https://github.com/marcosfad JPyke3 (Manjaro) https://github.com/JPyke3 ... and many more","title":"Notable Contributors"},{"location":"state/","text":"Introduction \u00b6 While Linux is usable on all T2 models, some features are limited by lack of drivers or similar. This page should give a general overview of what is working and what is not. Working \u00b6 Interal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel Screen USB Keyboard Camera Partially Working \u00b6 Trackpad: While technically working, it is far from the experience on macOS Touchbar: There is support for the so called simple mode, the same that you would see on Bootcamp Windows for example. Either kunction keys from 1 to 12 or basic media / brightness control are shown. Audio: With proper configuration audio can work, however it is not stable in some situations and switching speakers and the headphone jack only works manually Wifi: Only works on certain models due to incompatible firmware, see Is my model supported? Suspend GPU: In case the device has a dedicated AMD GPU it will only be able to use that, there is currently no way of switching to the Intel GPU Not working \u00b6 Touch ID Other \u00b6 File Systems: Linux can't mount APFS partitions nor can macOS mount ext4.","title":"Device Support and State of Features"},{"location":"state/#introduction","text":"While Linux is usable on all T2 models, some features are limited by lack of drivers or similar. This page should give a general overview of what is working and what is not.","title":"Introduction"},{"location":"state/#working","text":"Interal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel Screen USB Keyboard Camera","title":"Working"},{"location":"state/#partially-working","text":"Trackpad: While technically working, it is far from the experience on macOS Touchbar: There is support for the so called simple mode, the same that you would see on Bootcamp Windows for example. Either kunction keys from 1 to 12 or basic media / brightness control are shown. Audio: With proper configuration audio can work, however it is not stable in some situations and switching speakers and the headphone jack only works manually Wifi: Only works on certain models due to incompatible firmware, see Is my model supported? Suspend GPU: In case the device has a dedicated AMD GPU it will only be able to use that, there is currently no way of switching to the Intel GPU","title":"Partially Working"},{"location":"state/#not-working","text":"Touch ID","title":"Not working"},{"location":"state/#other","text":"File Systems: Linux can't mount APFS partitions nor can macOS mount ext4.","title":"Other"},{"location":"distributions/arch/building/","text":"Building the linux-mbp kernel for Arch Linux \u00b6 git clone https://github.com/aunali1/linux-mbp-arch cd linux-mbp-arch makepkg","title":"Building"},{"location":"distributions/arch/building/#building-the-linux-mbp-kernel-for-arch-linux","text":"git clone https://github.com/aunali1/linux-mbp-arch cd linux-mbp-arch makepkg","title":"Building the linux-mbp kernel for Arch Linux"},{"location":"distributions/arch/installation/","text":"Installing Arch Linux on a Mac with the T2 Chip \u00b6 You will need: USB drive with at least 1GB A way to plug it into your Mac (USB-C isn't USB-A) A wired internet connection (i.e. USB-C to Ethernet dongle) or wifi (not all models support wifi, see Is my model supported? and follow the WiFi guide on macOS part accordingly. Put the firmware files and any pacman packages you'll need to get WiFi working on the live environment in the partition you make in step 2b.) If you are on a Mac that came with macOS Mojave, do the first step of the WiFi guide now. Make sure you will have the output of the command for later. Making a partition for Linux. Open the Bootcamp installer and follow it until it asks for a Windows ISO, this will clear space for a Linux partition (by removing APFS snapshots). In macOS Disk Utility, make a partition, format doesn't matter, but pick the amount of space that you want for Linux. You won't be able to resize your APFS partitions from the installer, so you must make space now. Creating bootable media Download an installer ISO from here . Put this image onto a USB stick, follow these instructions on the Arch Wiki . Disabling secure boot Follow this article's instructions. Once in startup security utility, turn secure boot to no security and enable external boot. Booting the live environment. Plug the USB in to your computer. Boot while holding the option key, this will put you in macOS Startup Manager. Select the orange EFI option with arrow keys and press return/enter on it. Follow the Arch Wiki guide from here up to \"Format the partitions\". The note on the Arch Wiki mentions the EFI system partition, there will be one at /dev/nvme0n1p1 and you can use this if you don't intend to install Windows/already have it installed. If you do intend to triple boot, refer to this guide . Mount the EFI partition that you intend to use for your bootloader on /mnt/boot/efi , and your other partitions on / , etc. Continue following the Arch Wiki's guide until \"Install essential packages\". Use pacman -S wget to install wget Run wget https://dl.t2linux.org/archlinux/key.asc to obtain the signing key for t2 linux specific packages Add the key to pacman using pacman-key --add key.asc and pacman-key --lsign 7F9B8FC29F78B339 to allow the key Install the required packages into your new system with: pacstrap /mnt base linux-mbp linux-mbp-headers apple-bce-dkms-git dkms linux-firmware grub efibootmgr . Continue following the Arch Wiki's guide until you get to installing a bootloader. In your chroot , install the DKMS modules for Keyboard, Trackpad, Audio and the Touchbar with this guide . Follow the Audio Config Guide too. Add Aunali1's repository to /etc/pacman.conf , with echo [mbp]\\nServer = https://dl.t2linux.org/archlinux/\\$repo/\\$arch >> /etc/pacman.conf . Edit /etc/default/grub , you'll need to install a text editor (i.e. vim or nano ) with pacman -S PACKAGE_NAME for this step. On the line with GRUB_CMDLINE_LINUX= , add the following items: efi=noruntime intel_iommu=on pcie_ports=compact Run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable . grub-mkconfig -o /boot/grub/grub.cfg If your mac came with macOS Mojave, you can follow the rest of the WiFi guide now or after rebooting into your install. You now will be able to select your Arch install in the macOS Startup Manager by holding option at boot. If you have issues, feel free to ask on our Discord Server .","title":"Installation"},{"location":"distributions/arch/installation/#installing-arch-linux-on-a-mac-with-the-t2-chip","text":"You will need: USB drive with at least 1GB A way to plug it into your Mac (USB-C isn't USB-A) A wired internet connection (i.e. USB-C to Ethernet dongle) or wifi (not all models support wifi, see Is my model supported? and follow the WiFi guide on macOS part accordingly. Put the firmware files and any pacman packages you'll need to get WiFi working on the live environment in the partition you make in step 2b.) If you are on a Mac that came with macOS Mojave, do the first step of the WiFi guide now. Make sure you will have the output of the command for later. Making a partition for Linux. Open the Bootcamp installer and follow it until it asks for a Windows ISO, this will clear space for a Linux partition (by removing APFS snapshots). In macOS Disk Utility, make a partition, format doesn't matter, but pick the amount of space that you want for Linux. You won't be able to resize your APFS partitions from the installer, so you must make space now. Creating bootable media Download an installer ISO from here . Put this image onto a USB stick, follow these instructions on the Arch Wiki . Disabling secure boot Follow this article's instructions. Once in startup security utility, turn secure boot to no security and enable external boot. Booting the live environment. Plug the USB in to your computer. Boot while holding the option key, this will put you in macOS Startup Manager. Select the orange EFI option with arrow keys and press return/enter on it. Follow the Arch Wiki guide from here up to \"Format the partitions\". The note on the Arch Wiki mentions the EFI system partition, there will be one at /dev/nvme0n1p1 and you can use this if you don't intend to install Windows/already have it installed. If you do intend to triple boot, refer to this guide . Mount the EFI partition that you intend to use for your bootloader on /mnt/boot/efi , and your other partitions on / , etc. Continue following the Arch Wiki's guide until \"Install essential packages\". Use pacman -S wget to install wget Run wget https://dl.t2linux.org/archlinux/key.asc to obtain the signing key for t2 linux specific packages Add the key to pacman using pacman-key --add key.asc and pacman-key --lsign 7F9B8FC29F78B339 to allow the key Install the required packages into your new system with: pacstrap /mnt base linux-mbp linux-mbp-headers apple-bce-dkms-git dkms linux-firmware grub efibootmgr . Continue following the Arch Wiki's guide until you get to installing a bootloader. In your chroot , install the DKMS modules for Keyboard, Trackpad, Audio and the Touchbar with this guide . Follow the Audio Config Guide too. Add Aunali1's repository to /etc/pacman.conf , with echo [mbp]\\nServer = https://dl.t2linux.org/archlinux/\\$repo/\\$arch >> /etc/pacman.conf . Edit /etc/default/grub , you'll need to install a text editor (i.e. vim or nano ) with pacman -S PACKAGE_NAME for this step. On the line with GRUB_CMDLINE_LINUX= , add the following items: efi=noruntime intel_iommu=on pcie_ports=compact Run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable . grub-mkconfig -o /boot/grub/grub.cfg If your mac came with macOS Mojave, you can follow the rest of the WiFi guide now or after rebooting into your install. You now will be able to select your Arch install in the macOS Startup Manager by holding option at boot. If you have issues, feel free to ask on our Discord Server .","title":"Installing Arch Linux on a Mac with the T2 Chip"},{"location":"distributions/manjaro/building/","text":"Option 1: Docker - All Linux Distros \u00b6 First, you need to ensure that docker isn't using overlay or overlay2 filesystems. This can be verified by running docker info . And will be shown next to Storage Driver . In the event that you are running overlay , Look at this docker documentation on how to switch to VFS. Note, this doesn't work on OSX or Windows, I am working closely with the Manjaro Devs on this one. Quick Docker Install Script - For Linux sh -c \"$(curl -fsSL \"https://raw.githubusercontent.com/JPyke3/mbp-manjaro/master/build-in-docker.sh\")\" Docker Command docker run --privileged \\ -v ~/manjaro-mbp-iso:/root/out \\ -v {PATH-TO-REPO}:/root/iso-profiles\\ --env KERNEL=linux57-mbp\\ --env EDITION=gnome\\ jpyke3/mbp-manjaro-buildiso Command Breakdown \u00b6 --privileged This is required for allowing the filesystems to be created. (This is a security risk! Read for yourself the documentation on this flag) -v Create a folder on your host filesystem to retrieve the compiled files from the container Ensure that {PATH-TO-REPO} is replaced by the absolute path to this repo's files. --env There are two environment variables: KERNEL : This is used for defining which kernel version to use. All packages will follow the -mbp naming scheme. EDITION : This is used for defining which edition of manjaro you would like to install. Option 2: Manually on an existing Manjaro Install \u00b6 First Install Manjaro Tools: pamac install manjaro-tools-iso git Clone the repository to your home directory git clone https://github.com/JPyke3/mbp-manjaro ~/iso-profiles run a command corrisponding to your preferred version of Manjaro: buildiso -f -p {edition} -k linux57-mbp Available Options are: architect gnome kde nxd xfce awesome bspwm-mate cinnamon i3 lxqt openbox webdad bspwm budgie deepin lxde mate ukui File Locations \u00b6 Navigate to the directory for your iso file. If Using a official edition go to: cd /var/cache/manjaro-tools/iso/manjaro/{NAME_OF_EDITION}/20.0.3/ If using a community edition to: cd /var/cache/manjaro-tools/iso/community/{NAME_OF_EDITION}/20.0.3/","title":"Building"},{"location":"distributions/manjaro/building/#option-1-docker-all-linux-distros","text":"First, you need to ensure that docker isn't using overlay or overlay2 filesystems. This can be verified by running docker info . And will be shown next to Storage Driver . In the event that you are running overlay , Look at this docker documentation on how to switch to VFS. Note, this doesn't work on OSX or Windows, I am working closely with the Manjaro Devs on this one. Quick Docker Install Script - For Linux sh -c \"$(curl -fsSL \"https://raw.githubusercontent.com/JPyke3/mbp-manjaro/master/build-in-docker.sh\")\" Docker Command docker run --privileged \\ -v ~/manjaro-mbp-iso:/root/out \\ -v {PATH-TO-REPO}:/root/iso-profiles\\ --env KERNEL=linux57-mbp\\ --env EDITION=gnome\\ jpyke3/mbp-manjaro-buildiso","title":"Option 1: Docker - All Linux Distros"},{"location":"distributions/manjaro/building/#command-breakdown","text":"--privileged This is required for allowing the filesystems to be created. (This is a security risk! Read for yourself the documentation on this flag) -v Create a folder on your host filesystem to retrieve the compiled files from the container Ensure that {PATH-TO-REPO} is replaced by the absolute path to this repo's files. --env There are two environment variables: KERNEL : This is used for defining which kernel version to use. All packages will follow the -mbp naming scheme. EDITION : This is used for defining which edition of manjaro you would like to install.","title":"Command Breakdown"},{"location":"distributions/manjaro/building/#option-2-manually-on-an-existing-manjaro-install","text":"First Install Manjaro Tools: pamac install manjaro-tools-iso git Clone the repository to your home directory git clone https://github.com/JPyke3/mbp-manjaro ~/iso-profiles run a command corrisponding to your preferred version of Manjaro: buildiso -f -p {edition} -k linux57-mbp Available Options are: architect gnome kde nxd xfce awesome bspwm-mate cinnamon i3 lxqt openbox webdad bspwm budgie deepin lxde mate ukui","title":"Option 2: Manually on an existing Manjaro Install"},{"location":"distributions/manjaro/building/#file-locations","text":"Navigate to the directory for your iso file. If Using a official edition go to: cd /var/cache/manjaro-tools/iso/manjaro/{NAME_OF_EDITION}/20.0.3/ If using a community edition to: cd /var/cache/manjaro-tools/iso/community/{NAME_OF_EDITION}/20.0.3/","title":"File Locations"},{"location":"distributions/manjaro/faq/","text":"Installing alongside Windows \u00b6 If you want both Manjaro and Windows installed on your system, refer to this guide on triple booting as you install. Issues Updating Because of the MBP Repository \u00b6 When you update the system, you may recieve errors about my key being corrupted, if that occurs open a terminal and run this sudo pacman-key --recv-key 2BA2DFA128BBD111034F7626C7833DB15753380A --keyserver keyserver.ubuntu.com Switch Touchbar to Function Keys \u00b6 Run this in your terminal: sudo bash -c \"echo 2 > /sys/class/input/*/device/fnmode\"","title":"FAQ"},{"location":"distributions/manjaro/faq/#installing-alongside-windows","text":"If you want both Manjaro and Windows installed on your system, refer to this guide on triple booting as you install.","title":"Installing alongside Windows"},{"location":"distributions/manjaro/faq/#issues-updating-because-of-the-mbp-repository","text":"When you update the system, you may recieve errors about my key being corrupted, if that occurs open a terminal and run this sudo pacman-key --recv-key 2BA2DFA128BBD111034F7626C7833DB15753380A --keyserver keyserver.ubuntu.com","title":"Issues Updating Because of the MBP Repository"},{"location":"distributions/manjaro/faq/#switch-touchbar-to-function-keys","text":"Run this in your terminal: sudo bash -c \"echo 2 > /sys/class/input/*/device/fnmode\"","title":"Switch Touchbar to Function Keys"},{"location":"distributions/manjaro/home/","text":"Welcome to the mbp-manjaro wiki!","title":"Home"},{"location":"distributions/manjaro/installation/","text":"Download a latest release \u00b6 See releases Hardware Requirements \u00b6 USB-C to ethernet cable adapter. Whilst you can install this over WiFi, it would make it alot easier to use an Adapter. If you would like to use the WiFi to set up Manjaro then refer to the \"In order to get WiFi working\" Section after you have booted Manjaro USB-C to USB Adapter Install Procedure \u00b6 Partition your drive in macOS ready for a linux install. You can either use Disk Utility or use Bootcamp, important thing is, is that you have two partitions (Your macOS partition and your new linux one) (It isn't recommended that you totally delete macOS as firmware updates are applied through it). Flash your iso to a USB Stick, If you want a easy way to do this. Use Balena Etcher . For a more command line way of doing this, use dd. Disable macOS secure boot. Apple's Documentation a. Turn on your Mac, then press and hold Command (\u2318)-R immediately after you see the Apple logo to start up from macOS Recovery. b. When you see the macOS Utilities window, choose Utilities > Startup Security Utility from the menu bar. c. When you're asked to authenticate, click Enter macOS Password, then choose an administrator account and enter its password. d. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". e. Reboot your Mac. Once Secure boot is diabled, fully shutdown your Computer and Power it on again whilst holding the Option (\u2325) key. Select the yellow EFI System using the arrow keys and hit enter. Scroll down to Boot x86 64 {Your Edition} using the arrow keys and press enter. After booting into Manjaro, open a terminal window and run the following commands: systemctl start systemd-timesyncd.service sudo sed -i 's/https:\\/\\/jacobpyke.xyz/https:\\/\\/mbp-repo.jacobpyke.xyz/' /etc/pacman.conf sudo pacman -R calamares sudo pacman -S calamares-mbp Open the installer and proceed normally until you hit the partitioning stage Click Manual Partitioning Click on /dev/nvme0n1p1 then press edit at the bottom of the install window, change the Change the Mount Point: /boot/efi , after that click okay. Usually, the macOS partition is mounted to /dev/nvme0n1p2 (Double check this, the Installer should recognize this partition as an Apple APFS Partition). Ignore the macOS partition. Delete the partition you created before, this is usually mounted to /dev/nvme0n1p3 . These next steps involve partitioning the /boot (boot), / (Root) and /home (Home) partitions of your Linux filesystem, if you know what you are doing feel free to skip to the next step (15). Create a 2000 MiB partition with ext4 as the file system. Change the mount point to /boot and click okay. Create a 51200 MiB partition with ext4 as the file system. Change the mount point to / and click okay. Use the remaining disk space to create an ext4 file system. Change the mount point to /home . Continue the rest of the setup as normal. Once the setup process is complete, restart your computer remembering to remove the install medium once powered off Once again, Power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot Welcome to Manjaro :)","title":"Installation"},{"location":"distributions/manjaro/installation/#download-a-latest-release","text":"See releases","title":"Download a latest release"},{"location":"distributions/manjaro/installation/#hardware-requirements","text":"USB-C to ethernet cable adapter. Whilst you can install this over WiFi, it would make it alot easier to use an Adapter. If you would like to use the WiFi to set up Manjaro then refer to the \"In order to get WiFi working\" Section after you have booted Manjaro USB-C to USB Adapter","title":"Hardware Requirements"},{"location":"distributions/manjaro/installation/#install-procedure","text":"Partition your drive in macOS ready for a linux install. You can either use Disk Utility or use Bootcamp, important thing is, is that you have two partitions (Your macOS partition and your new linux one) (It isn't recommended that you totally delete macOS as firmware updates are applied through it). Flash your iso to a USB Stick, If you want a easy way to do this. Use Balena Etcher . For a more command line way of doing this, use dd. Disable macOS secure boot. Apple's Documentation a. Turn on your Mac, then press and hold Command (\u2318)-R immediately after you see the Apple logo to start up from macOS Recovery. b. When you see the macOS Utilities window, choose Utilities > Startup Security Utility from the menu bar. c. When you're asked to authenticate, click Enter macOS Password, then choose an administrator account and enter its password. d. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". e. Reboot your Mac. Once Secure boot is diabled, fully shutdown your Computer and Power it on again whilst holding the Option (\u2325) key. Select the yellow EFI System using the arrow keys and hit enter. Scroll down to Boot x86 64 {Your Edition} using the arrow keys and press enter. After booting into Manjaro, open a terminal window and run the following commands: systemctl start systemd-timesyncd.service sudo sed -i 's/https:\\/\\/jacobpyke.xyz/https:\\/\\/mbp-repo.jacobpyke.xyz/' /etc/pacman.conf sudo pacman -R calamares sudo pacman -S calamares-mbp Open the installer and proceed normally until you hit the partitioning stage Click Manual Partitioning Click on /dev/nvme0n1p1 then press edit at the bottom of the install window, change the Change the Mount Point: /boot/efi , after that click okay. Usually, the macOS partition is mounted to /dev/nvme0n1p2 (Double check this, the Installer should recognize this partition as an Apple APFS Partition). Ignore the macOS partition. Delete the partition you created before, this is usually mounted to /dev/nvme0n1p3 . These next steps involve partitioning the /boot (boot), / (Root) and /home (Home) partitions of your Linux filesystem, if you know what you are doing feel free to skip to the next step (15). Create a 2000 MiB partition with ext4 as the file system. Change the mount point to /boot and click okay. Create a 51200 MiB partition with ext4 as the file system. Change the mount point to / and click okay. Use the remaining disk space to create an ext4 file system. Change the mount point to /home . Continue the rest of the setup as normal. Once the setup process is complete, restart your computer remembering to remove the install medium once powered off Once again, Power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot Welcome to Manjaro :)","title":"Install Procedure"},{"location":"distributions/manjaro/wifi-installation/","text":"Step 1 - Installing WiFi firmware files \u00b6 Follow the generic instructions on the wifi guide until (including) point 3. in the On Linux section. Step 2 - Installing IWD \u00b6 sudo pacman -S iwd wifi-fix-mbp systemctl stop wpa_supplicant systemctl mask wpa_supplicant sudo nano /etc/NetworkManager/NetworkManager.conf paste in this at the end: [device] wifi.backend=iwd Run: systemctl enable iwd systemctl enable wifi-fix.service then reboot.","title":"Wifi Installation"},{"location":"distributions/manjaro/wifi-installation/#step-1-installing-wifi-firmware-files","text":"Follow the generic instructions on the wifi guide until (including) point 3. in the On Linux section.","title":"Step 1 - Installing WiFi firmware files"},{"location":"distributions/manjaro/wifi-installation/#step-2-installing-iwd","text":"sudo pacman -S iwd wifi-fix-mbp systemctl stop wpa_supplicant systemctl mask wpa_supplicant sudo nano /etc/NetworkManager/NetworkManager.conf paste in this at the end: [device] wifi.backend=iwd Run: systemctl enable iwd systemctl enable wifi-fix.service then reboot.","title":"Step 2 - Installing IWD"},{"location":"distributions/ubuntu/building/","text":"Upgrading to a new kernel for Ubuntu Linux \u00b6 We will need two things, a tar of the Linux kernel, and aunali1's linux-mbp-arch patches. The kernel can be downloaded from here. Make sure to get the right version for the current linux-mbp-arch version. After downloading the kernel, we can start. Make a folder for the Linux kernel and the patches to go into. For this guide, we'll make a folder in the home directory called kernel . mkdir ~/kernel && cd ~/kernel Move the Linux kernel archive to this new folder and extract it mv /path/to/linux-[INSERT VERSION NUMBER HERE].tar.gz ~/kernel tar -xf linux-[INSERT VERSION NUMBER HERE].tar.gz Git clone the linux-mbp-arch repo to the directory where the kernel is located and change the directory to the Linux kernel git clone https://github.com/aunali1/linux-mbp-arch.git cd linux-[INSERT VERSION NUMBER HERE] Manually apply the patches to the Linux kernel for i in /path/to/linux-mbp-arch-master/*.patch; do patch -p1 --verbose < $i; done Configure the kernel then compile it. This will take a while Make sure you have libncurses-dev libssl-dev flex bison installed make menuconfig SAVE, OK, then EXIT make -j8 sudo make modules_install -j8 sudo make install -j8 Make the kernel lighter, then update initramfs sudo find . -name *.ko -exec strip --strip-unneeded {} + sudo update-initramfs -u Make sure the new initrd.img, vmlinuz, and config are in /boot cd /boot && ls Reboot your computer sudo reboot Verify the kernel upgraded successfully uname -r If it reports the kernel you wanted to upgrade to, you are successful!","title":"Building"},{"location":"distributions/ubuntu/building/#upgrading-to-a-new-kernel-for-ubuntu-linux","text":"We will need two things, a tar of the Linux kernel, and aunali1's linux-mbp-arch patches. The kernel can be downloaded from here. Make sure to get the right version for the current linux-mbp-arch version. After downloading the kernel, we can start. Make a folder for the Linux kernel and the patches to go into. For this guide, we'll make a folder in the home directory called kernel . mkdir ~/kernel && cd ~/kernel Move the Linux kernel archive to this new folder and extract it mv /path/to/linux-[INSERT VERSION NUMBER HERE].tar.gz ~/kernel tar -xf linux-[INSERT VERSION NUMBER HERE].tar.gz Git clone the linux-mbp-arch repo to the directory where the kernel is located and change the directory to the Linux kernel git clone https://github.com/aunali1/linux-mbp-arch.git cd linux-[INSERT VERSION NUMBER HERE] Manually apply the patches to the Linux kernel for i in /path/to/linux-mbp-arch-master/*.patch; do patch -p1 --verbose < $i; done Configure the kernel then compile it. This will take a while Make sure you have libncurses-dev libssl-dev flex bison installed make menuconfig SAVE, OK, then EXIT make -j8 sudo make modules_install -j8 sudo make install -j8 Make the kernel lighter, then update initramfs sudo find . -name *.ko -exec strip --strip-unneeded {} + sudo update-initramfs -u Make sure the new initrd.img, vmlinuz, and config are in /boot cd /boot && ls Reboot your computer sudo reboot Verify the kernel upgraded successfully uname -r If it reports the kernel you wanted to upgrade to, you are successful!","title":"Upgrading to a new kernel for Ubuntu Linux"},{"location":"distributions/ubuntu/faq/","text":"Why does my MacBook turn off in the middle of the Ubuntu installation? \u00b6 This seems to happen with certain MacBooks because the GRUB bootloader installer tries accessing the efivars/nvram, which Apple doesn't allow and the installer doesn't know what to do. There is a way to stop this. Boot into the installation media with an External USB Keyboard plugged in. Press e when you selected the \"Try Ubuntu without installing\" option. Scroll to the bottom with the arrow keys, and type in efi=noruntime . With the External keyboard, then press CTRL+X or F10 to boot into the Live Media. The installation should work fine now. This issue has occured for anyone on the 16,1 and maybe the 16,4. (Credits to Redecorating for this fix) Making the GRUB Menu appear \u00b6 The GRUB bootloader by default turns off the GRUB Menu. This means you can't boot into Bootcamp Windows if it's installed. This can be easily fixed after Ubuntu is fully installed. In a Terminal in Ubuntu, edit file /etc/default/grub with any preferred editior (nano/vim) and with root permissions. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . Save the file once you're done. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. (Also credits to Redecorating for telling me about this fix, marcosfad for documenting the fix here ) Installing alongside Windows \u00b6 If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Ubuntu. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again. Why isn't sound working? \u00b6 Due to issues in the mbp-ubuntu install process, there is no sound working after install. You'll have to set it up manually. Refer to this guide on audio configuration .","title":"FAQ"},{"location":"distributions/ubuntu/faq/#why-does-my-macbook-turn-off-in-the-middle-of-the-ubuntu-installation","text":"This seems to happen with certain MacBooks because the GRUB bootloader installer tries accessing the efivars/nvram, which Apple doesn't allow and the installer doesn't know what to do. There is a way to stop this. Boot into the installation media with an External USB Keyboard plugged in. Press e when you selected the \"Try Ubuntu without installing\" option. Scroll to the bottom with the arrow keys, and type in efi=noruntime . With the External keyboard, then press CTRL+X or F10 to boot into the Live Media. The installation should work fine now. This issue has occured for anyone on the 16,1 and maybe the 16,4. (Credits to Redecorating for this fix)","title":"Why does my MacBook turn off in the middle of the Ubuntu installation?"},{"location":"distributions/ubuntu/faq/#making-the-grub-menu-appear","text":"The GRUB bootloader by default turns off the GRUB Menu. This means you can't boot into Bootcamp Windows if it's installed. This can be easily fixed after Ubuntu is fully installed. In a Terminal in Ubuntu, edit file /etc/default/grub with any preferred editior (nano/vim) and with root permissions. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . Save the file once you're done. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. (Also credits to Redecorating for telling me about this fix, marcosfad for documenting the fix here )","title":"Making the GRUB Menu appear"},{"location":"distributions/ubuntu/faq/#installing-alongside-windows","text":"If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Ubuntu. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again.","title":"Installing alongside Windows"},{"location":"distributions/ubuntu/faq/#why-isnt-sound-working","text":"Due to issues in the mbp-ubuntu install process, there is no sound working after install. You'll have to set it up manually. Refer to this guide on audio configuration .","title":"Why isn't sound working?"},{"location":"distributions/ubuntu/home/","text":"Welcome to the mbp-ubuntu wiki! Click here to get started.","title":"Home"},{"location":"distributions/ubuntu/installation/","text":"Download the latest safe release \u00b6 Warning: Versions newer than 5.7.19 are considered in-development builds and should not be used due to issues from within the kernel and the init system. Download here The iso you should download depends on your machine, but usually the normal mbp iso works fine. Hardware Requirements \u00b6 USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter Install Procedure \u00b6 (These instructions are reused from the Manjaro installation guide) In order to install Ubuntu, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when your done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) a. Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. b. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility c. If it asks for your password, type in the administrator's password and press OK. d. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". e. You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Ubuntu without installing\". Just a warning, if you select \"Install Ubuntu\", there might be a loud startup sound. Once booted into Ubuntu, you can install it like normal until you get to the partition option. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: a. a 1GB ext4 partiton mounted at /boot b. (optional) 8GB swap partition (this can be larger depending on what you are using Ubuntu for) c. rest of the free partition space or around 30GB to an ext4 partition mounted at / d. (Optional) rest of the free partition space to an ext4 partition mounted at /home e. Leave efi boot alone. Should work just fine. Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to FAQ. If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Ubuntu! :)","title":"Installation"},{"location":"distributions/ubuntu/installation/#download-the-latest-safe-release","text":"Warning: Versions newer than 5.7.19 are considered in-development builds and should not be used due to issues from within the kernel and the init system. Download here The iso you should download depends on your machine, but usually the normal mbp iso works fine.","title":"Download the latest safe release"},{"location":"distributions/ubuntu/installation/#hardware-requirements","text":"USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter","title":"Hardware Requirements"},{"location":"distributions/ubuntu/installation/#install-procedure","text":"(These instructions are reused from the Manjaro installation guide) In order to install Ubuntu, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when your done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) a. Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. b. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility c. If it asks for your password, type in the administrator's password and press OK. d. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". e. You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Ubuntu without installing\". Just a warning, if you select \"Install Ubuntu\", there might be a loud startup sound. Once booted into Ubuntu, you can install it like normal until you get to the partition option. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: a. a 1GB ext4 partiton mounted at /boot b. (optional) 8GB swap partition (this can be larger depending on what you are using Ubuntu for) c. rest of the free partition space or around 30GB to an ext4 partition mounted at / d. (Optional) rest of the free partition space to an ext4 partition mounted at /home e. Leave efi boot alone. Should work just fine. Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to FAQ. If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Ubuntu! :)","title":"Install Procedure"},{"location":"guides/audio-config/","text":"Introduction \u00b6 This page explains how to get the config files for using the T2 audio device, which allows use of the 3.5mm headphone port, the built in speakers, the built in mic and the headphones' mic. Audio Configuration Files \u00b6 These files can be found here , and there are instructions on where to put them in that gist. If you are using a 2019 16 inch MBP, use this set of files, as that laptop has 6 speakers and needs slightly different config. Using Pipewire instead of Pulseaudio \u00b6 You'll need to modify the /lib/udev/rules.d/91-pulseaudio-custom.rules file from the links above. SUBSYSTEM!=\"sound\", GOTO=\"pulseaudio_end\" ACTION!=\"change\", GOTO=\"pulseaudio_end\" KERNEL!=\"card*\", GOTO=\"pulseaudio_end\" -SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\" +SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\", ENV{ACP_PROFILE_SET}=\"apple-t2.conf\" LABEL=\"pulseaudio_end\" Issues \u00b6 Some people are unable to get audio input to work. You may have to use a seperate microphone. All of apple's fancy tuning of the speakers is done in macOS, we don't have anything like that at the moment.","title":"Audio"},{"location":"guides/audio-config/#introduction","text":"This page explains how to get the config files for using the T2 audio device, which allows use of the 3.5mm headphone port, the built in speakers, the built in mic and the headphones' mic.","title":"Introduction"},{"location":"guides/audio-config/#audio-configuration-files","text":"These files can be found here , and there are instructions on where to put them in that gist. If you are using a 2019 16 inch MBP, use this set of files, as that laptop has 6 speakers and needs slightly different config.","title":"Audio Configuration Files"},{"location":"guides/audio-config/#using-pipewire-instead-of-pulseaudio","text":"You'll need to modify the /lib/udev/rules.d/91-pulseaudio-custom.rules file from the links above. SUBSYSTEM!=\"sound\", GOTO=\"pulseaudio_end\" ACTION!=\"change\", GOTO=\"pulseaudio_end\" KERNEL!=\"card*\", GOTO=\"pulseaudio_end\" -SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\" +SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\", ENV{ACP_PROFILE_SET}=\"apple-t2.conf\" LABEL=\"pulseaudio_end\"","title":"Using Pipewire instead of Pulseaudio"},{"location":"guides/audio-config/#issues","text":"Some people are unable to get audio input to work. You may have to use a seperate microphone. All of apple's fancy tuning of the speakers is done in macOS, we don't have anything like that at the moment.","title":"Issues"},{"location":"guides/dkms/","text":"Introduction \u00b6 This page explains how to install the kernel modules for the Keyboard, Audio, Touchbar and the Ambient Light sensor with DKMS. You will need a patched kernel. Do you need to do this? \u00b6 Is your keyboard working? If no, then you'll need the BCE module. If you have a Touchbar, is it working? If no, then you'll need the apple-ibridge module. Installing modules \u00b6 Install the dkms package Installing the BCE (Buffer Copy Engine) module for Keyboard and Audio If you are on arch, you can use Aunali1's apple-bce-dkms-git package Otherwise, sudo git clone https://github.com/t2linux/apple-bce-drv /usr/src/apple-bce-r183.c884d9c Create a dkms.conf file in /usr/src/apple-bce-r183.c884d9c and put in the following: PACKAGE_NAME=\"apple-bce\" PACKAGE_VERSION=\"r183.c884d9c\" MAKE[0]=\"make KVERSION=$kernelver\" CLEAN=\"make clean\" BUILT_MODULE_NAME[0]=\"apple-bce\" DEST_MODULE_LOCATION[0]=\"/kernel/drivers/misc\" AUTOINSTALL=\"yes\" Use sudo dkms install -m apple-bce -v r183.c884d9c . Add -k x.x.x-mbp if you need to install for a specific kernel version. Installing the Touchbar and Ambient Light sensor modules sudo git clone https://github.com/t2linux/apple-ib-drv /usr/src/apple-ibridge-0.1 Use sudo dkms install -m apple-ibridge -v 0.1 . Add -k x.x.x-mbp if you need to install for a specific kernel version. Load the modules into the kernel sudo modprobe apple_bce sudo modprobe apple_ib_tb sudo modprobe apple_ib_als The Touchbar and keyboard should work, for audio, you'll need some config files, refer to the Audio Config guide . Make modules load on boot \u00b6 echo \"apple-bce apple-ib_tb apple-ib-als brcmfmac\" >> /etc/modules-load.d/t2.conf If you don't want (for example) the touch bar modules, you can ommit them from this command. brcmfmac is needed to use the internal wifi chip, refer to the wifi guide for details on how to set that up. Module configuration \u00b6 The Touchbar module offers some modes to set. In /etc/modprobe.d/apple-tb.conf , set fnmode ( options apple-ib-tb fnmode=x ) to one of the following options: 0: Only show F1-F12 1: Show media and brightness controls, use the fn key to switch to F1-12 2: Show F1-F12, use the fn key to switch to media and brightness controls 3: Only show media and brightness controls 4: Only show the escape key Fixing Suspend \u00b6 Copy this script to /lib/systemd/system-sleep/rmmod_tb.sh It unloads the Touchbar modules as they can cause issues for suspend. Issues \u00b6 The apple_ib_als module can cause issues, if you find your computer hanging at shutdown, or having BCE errors at boot, try blacklisting it sudo sh -c \"echo blacklist apple-ib-als\" >> /etc/modprobe.d/blacklist.conf or removing it from /etc/modules-load.d/t2.conf .","title":"DKMS"},{"location":"guides/dkms/#introduction","text":"This page explains how to install the kernel modules for the Keyboard, Audio, Touchbar and the Ambient Light sensor with DKMS. You will need a patched kernel.","title":"Introduction"},{"location":"guides/dkms/#do-you-need-to-do-this","text":"Is your keyboard working? If no, then you'll need the BCE module. If you have a Touchbar, is it working? If no, then you'll need the apple-ibridge module.","title":"Do you need to do this?"},{"location":"guides/dkms/#installing-modules","text":"Install the dkms package Installing the BCE (Buffer Copy Engine) module for Keyboard and Audio If you are on arch, you can use Aunali1's apple-bce-dkms-git package Otherwise, sudo git clone https://github.com/t2linux/apple-bce-drv /usr/src/apple-bce-r183.c884d9c Create a dkms.conf file in /usr/src/apple-bce-r183.c884d9c and put in the following: PACKAGE_NAME=\"apple-bce\" PACKAGE_VERSION=\"r183.c884d9c\" MAKE[0]=\"make KVERSION=$kernelver\" CLEAN=\"make clean\" BUILT_MODULE_NAME[0]=\"apple-bce\" DEST_MODULE_LOCATION[0]=\"/kernel/drivers/misc\" AUTOINSTALL=\"yes\" Use sudo dkms install -m apple-bce -v r183.c884d9c . Add -k x.x.x-mbp if you need to install for a specific kernel version. Installing the Touchbar and Ambient Light sensor modules sudo git clone https://github.com/t2linux/apple-ib-drv /usr/src/apple-ibridge-0.1 Use sudo dkms install -m apple-ibridge -v 0.1 . Add -k x.x.x-mbp if you need to install for a specific kernel version. Load the modules into the kernel sudo modprobe apple_bce sudo modprobe apple_ib_tb sudo modprobe apple_ib_als The Touchbar and keyboard should work, for audio, you'll need some config files, refer to the Audio Config guide .","title":"Installing modules"},{"location":"guides/dkms/#make-modules-load-on-boot","text":"echo \"apple-bce apple-ib_tb apple-ib-als brcmfmac\" >> /etc/modules-load.d/t2.conf If you don't want (for example) the touch bar modules, you can ommit them from this command. brcmfmac is needed to use the internal wifi chip, refer to the wifi guide for details on how to set that up.","title":"Make modules load on boot"},{"location":"guides/dkms/#module-configuration","text":"The Touchbar module offers some modes to set. In /etc/modprobe.d/apple-tb.conf , set fnmode ( options apple-ib-tb fnmode=x ) to one of the following options: 0: Only show F1-F12 1: Show media and brightness controls, use the fn key to switch to F1-12 2: Show F1-F12, use the fn key to switch to media and brightness controls 3: Only show media and brightness controls 4: Only show the escape key","title":"Module configuration"},{"location":"guides/dkms/#fixing-suspend","text":"Copy this script to /lib/systemd/system-sleep/rmmod_tb.sh It unloads the Touchbar modules as they can cause issues for suspend.","title":"Fixing Suspend"},{"location":"guides/dkms/#issues","text":"The apple_ib_als module can cause issues, if you find your computer hanging at shutdown, or having BCE errors at boot, try blacklisting it sudo sh -c \"echo blacklist apple-ib-als\" >> /etc/modprobe.d/blacklist.conf or removing it from /etc/modules-load.d/t2.conf .","title":"Issues"},{"location":"guides/fan/","text":"Introduction \u00b6 This page is a step by step guide to get fan control working on t2 macs. Steps \u00b6 Close the repository into a directory of your choice git clone https://github.com/networkException/mbpfan Compile the daemon using make Note: This will run a patch script that finds a fan device on your system. You can use its output for debug purposes Run the tests to confirm that everything is working sudo make tests If the tests ran successfully, install using sudo make install Now enable starting at boot sudo cp mbpfan.service /etc/systemd/system/ sudo systemctl enable mbpfan.service sudo systemctl daemon-reload sudo systemctl start mbpfan.service Configuration \u00b6 The daemons config file can be found at /etc/mpbfan.conf . Uncommenting and setting min_fan1_speed for example will let you force a certain speed.","title":"Fan"},{"location":"guides/fan/#introduction","text":"This page is a step by step guide to get fan control working on t2 macs.","title":"Introduction"},{"location":"guides/fan/#steps","text":"Close the repository into a directory of your choice git clone https://github.com/networkException/mbpfan Compile the daemon using make Note: This will run a patch script that finds a fan device on your system. You can use its output for debug purposes Run the tests to confirm that everything is working sudo make tests If the tests ran successfully, install using sudo make install Now enable starting at boot sudo cp mbpfan.service /etc/systemd/system/ sudo systemctl enable mbpfan.service sudo systemctl daemon-reload sudo systemctl start mbpfan.service","title":"Steps"},{"location":"guides/fan/#configuration","text":"The daemons config file can be found at /etc/mpbfan.conf . Uncommenting and setting min_fan1_speed for example will let you force a certain speed.","title":"Configuration"},{"location":"guides/wifi/","text":"Introduction \u00b6 This page is a step by step guide to get wifi working on supported models. Note that currently not all models have support, see Is my model supported? . Is my model supported? \u00b6 Did your device release with macOS Mojave or earlier initially? If yes, is it a 15,4? If yes, there is currently no support If no, there is support If no, is it a 16,1? If yes, there is support using a self compiled kernel If no, there is currently no support On macOS \u00b6 Run both ioreg -l | grep RequestedFiles and system_profiler SPHardwareDataType | grep \"Model Identifier\" in a terminal and note down the output. On Linux \u00b6 Look at the ouput of the first command listed above, it will probably look something like this \"RequestedFiles\" = ( { \"Firmware\" = \"C-4364s-B2/kauai.trx\" , \"TxCap\" = \"C-4364s-B2/kauai-X3.txcb\" , \"Regulatory\" = \"C-4364s-B2/kauai-X3.clmb\" , \"NVRAM\" = \"C-4364s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\" } ) Navigate to https://packages.aunali1.com/apple/wifi-fw/18G2022/ . Note: Firmware that came with your macOS installation only works when using macOS Mojave, its recommended to use the web hosted version to ensure compatibility. Should you still need to get firmware from your macOS installation, you will find it in /usr/share/firmware/wifi Note: If you do not have the 4364 chipset, make sure to use your chipset's identifier in the firmware names Look at the path of the file in the command output that ends in .trx . On the website, download that file and rename it to brcmfmac4364-pcie.bin . Do the same for the .clmb file and rename it to brcmfmac4364-pcie.clm_blob . In the end, download the .txt file and rename it to brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt but change the 15,1 in this string to model identifier was the output of the second command described here . Now that you got those 3 files, move them to /lib/firmware/brcm/ . You can now test out if the files work by running sudo modprobe -r brcmfmac && sudo modprobe brcmfmac and looking at the list of wifi access points nearby. Note: From this point on the instructions might be different for a distribution that you are trying to install. Note: Using iwd is technically not needed for using wifi, however wpa2 is unstable without it. Running the command from step 3 would work for connecting to wpa2 networks as well but it would have to be run every time before connecting to a network. To get WPA2 to work stably, install the iwd package (for example sudo apt install iwd on Ubuntu). Edit /etc/NetworkManager/NetworkManager.conf to look like the following: [device] wifi.backend = iwd Set iwd to run on boot with the following commands (assuming that you are using systemd) sudo systemctl enable iwd sudo systemctl start iwd sudo systemctl restart NetworkManager If you wifi disconnects or has issues otherwise its advises to restart iwd: sudo systemctl restart iwd Custom Kernel for 16,1 \u00b6 As mentioned in Is my model supported? there is wifi support for the MacBook Pro 16,1. This is achived through a patchset for a custom kernel. If you are on an arch based distribution use the following commands to compile the kernel: git clone https://github.com/jamlam/mbp-16.1-linux-wifi.git cd mbp-16.1-linux-wifi.git makepkg -si For non arch distributions follow the Ubuntu Building Guide . Make sure to use mbp-16.1-linux-wifi instead of linux-mbp-arch as the patchset in step 3 however. Once you have verified that you booted into the correct kernel, follow the Wifi Guide but use the firmware files from macOS (as stated in a Note on the page) and not from a fileserver.","title":"Wifi"},{"location":"guides/wifi/#introduction","text":"This page is a step by step guide to get wifi working on supported models. Note that currently not all models have support, see Is my model supported? .","title":"Introduction"},{"location":"guides/wifi/#is-my-model-supported","text":"Did your device release with macOS Mojave or earlier initially? If yes, is it a 15,4? If yes, there is currently no support If no, there is support If no, is it a 16,1? If yes, there is support using a self compiled kernel If no, there is currently no support","title":"Is my model supported?"},{"location":"guides/wifi/#on-macos","text":"Run both ioreg -l | grep RequestedFiles and system_profiler SPHardwareDataType | grep \"Model Identifier\" in a terminal and note down the output.","title":"On macOS"},{"location":"guides/wifi/#on-linux","text":"Look at the ouput of the first command listed above, it will probably look something like this \"RequestedFiles\" = ( { \"Firmware\" = \"C-4364s-B2/kauai.trx\" , \"TxCap\" = \"C-4364s-B2/kauai-X3.txcb\" , \"Regulatory\" = \"C-4364s-B2/kauai-X3.clmb\" , \"NVRAM\" = \"C-4364s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\" } ) Navigate to https://packages.aunali1.com/apple/wifi-fw/18G2022/ . Note: Firmware that came with your macOS installation only works when using macOS Mojave, its recommended to use the web hosted version to ensure compatibility. Should you still need to get firmware from your macOS installation, you will find it in /usr/share/firmware/wifi Note: If you do not have the 4364 chipset, make sure to use your chipset's identifier in the firmware names Look at the path of the file in the command output that ends in .trx . On the website, download that file and rename it to brcmfmac4364-pcie.bin . Do the same for the .clmb file and rename it to brcmfmac4364-pcie.clm_blob . In the end, download the .txt file and rename it to brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt but change the 15,1 in this string to model identifier was the output of the second command described here . Now that you got those 3 files, move them to /lib/firmware/brcm/ . You can now test out if the files work by running sudo modprobe -r brcmfmac && sudo modprobe brcmfmac and looking at the list of wifi access points nearby. Note: From this point on the instructions might be different for a distribution that you are trying to install. Note: Using iwd is technically not needed for using wifi, however wpa2 is unstable without it. Running the command from step 3 would work for connecting to wpa2 networks as well but it would have to be run every time before connecting to a network. To get WPA2 to work stably, install the iwd package (for example sudo apt install iwd on Ubuntu). Edit /etc/NetworkManager/NetworkManager.conf to look like the following: [device] wifi.backend = iwd Set iwd to run on boot with the following commands (assuming that you are using systemd) sudo systemctl enable iwd sudo systemctl start iwd sudo systemctl restart NetworkManager If you wifi disconnects or has issues otherwise its advises to restart iwd: sudo systemctl restart iwd","title":"On Linux"},{"location":"guides/wifi/#custom-kernel-for-161","text":"As mentioned in Is my model supported? there is wifi support for the MacBook Pro 16,1. This is achived through a patchset for a custom kernel. If you are on an arch based distribution use the following commands to compile the kernel: git clone https://github.com/jamlam/mbp-16.1-linux-wifi.git cd mbp-16.1-linux-wifi.git makepkg -si For non arch distributions follow the Ubuntu Building Guide . Make sure to use mbp-16.1-linux-wifi instead of linux-mbp-arch as the patchset in step 3 however. Once you have verified that you booted into the correct kernel, follow the Wifi Guide but use the firmware files from macOS (as stated in a Note on the page) and not from a fileserver.","title":"Custom Kernel for 16,1"},{"location":"guides/windows/","text":"Introduction \u00b6 This page is a guide on getting Windows and Linux both installed. Secure Boot Must be disabled from macOS recovery. If you want to be able to choose from macOS, Windows, or Linux in the Startup Manager (the menu you get by holding \u2325 key), goto 'Using seperate EFI partitions'. If you just want to select between Linux and Windows in the GRUB bootloader, goto 'Using the same EFI partition'. The simplist way to triple boot is to install Windows first, and install linux on the same EFI partition, so that the Windows option in Startup Manager will let you pick Linux or Windows. To do that, follow the first set of instructions here. Using the same EFI partition \u00b6 If Windows is installed first \u00b6 Install linux normally, with a patched kernel and dkms modules (this is probably done for you if you are using an installer specific to t2 macs). Put your bootloader on /dev/nvme0n1p1 , which should be set to mount at /boot/efi . Once it installs the bootloader, the Windows entry in startup manager will boot linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). Open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. If Linux is installed first \u00b6 Make sure that your linux partitions are not labled as Microsoft Basic Data , if they are, Bootcamp Assistant will think Windows is already installed. To fix this, go to Linux and do sudo cfdisk /dev/nvme0n1 and change the type of your linux partitions to Linux Filesystem . Install Windows normaly with Bootcamp. Windows will replace your Linux boot option. Boot into macOS. sudo diskutil mount disk0s1 Go to /Volumes/EFI/efi In this folder there will be a Microsoft folder, an Apple folder, one with your distro's name or just GRUB , and one called Boot . The Boot folder will have a file named bootx64.efi , rename this to windows_bootx64.efi Copy the grubx64.efi file in your distro's folder to /Volumes/EFI/efi/Boot/bootx64.efi . The the Windows option in Startup Manager will now boot Linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). In Linux, open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. It may be possible to skip steps 5-8 by doing the following command in macOS: sudo sh -c \"bless --mount /Volumes/EFI --setBoot --file /Volumes/EFI/efi/$(ls /Volumes/EFI/efi|grep -i -e microsoft -e boot -e apple -v)/grubx64.efi --shortform\" This might not prevent step 8 from being needed. Using seperate EFI partitions \u00b6 Installing Linux (With or without Windows already installed) \u00b6 In macOS \u00b6 Create partitions with Disk Utility: Make a 200Mb FAT32 partition, call it something like EFI2 Create your main partition(s) for Linux, make them macOS Extended/HFS+ to stop Bootcamp Installer from thinking they are Windows. These will be erased and reformatted by your installer. In your distro's installer \u00b6 If you are using an interactive installer: Set the EFI2 partition to be mounted at /boot/efi , don't use the partition labeled EFI located at /dev/nvme0n1p1 , to avoid breaking the Windows bootloader stored there. Your main partition that were formatted as macOS Extended/HFS+ can be mounted at / . If it fails to install the bootloader, open a terminal: Use lsblk or mount to find where your install's root partition is installed chroot $that_partitions_mount_point_here grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. If you are doing it manually: Format the main Linux partition(s) as ext4, btrfs, or whatever you intend to use. Mount your partitions, put the EFI2 one at /boot/efi within your chroot. Install normally up until you install your bootloader, but don't forget to get a patched kernel and the correct dkms modules Within your chroot, do grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. Installing Windows when Linux is installed \u00b6 If there are partitions labeled as Microsoft Basic Data , Bootcamp Assistant will think you have Windows installed. Use sudo cfdisk /dev/nvme0n1 to change your Linux partitions to Linux Filesystem or whatever is appropriate. If your second EFI partition is labeled as EFI System , you'll need to use cfdisk again to make it not that, as the Windows installer fails if there are two. Bootcamp should install Windows normally. If you put your Linux bootloader on /dev/nvme0n1p1 , Windows will replace it, and that's why a second EFI partition is ideal. Quality of life things \u00b6 Giving Options in macOS Startup Manager Custom Icons \u00b6 Put an icns file with your desired icon in the top directory of the disk that the bootloader of the menu entry is on, and call it .VolumeIcon.icns . Setting your Linux Partitions as Linux Filesystem type \u00b6 Use sudo cfdisk /dev/nvme0n1 and change the type of your Linux partitions. This will show up when you do diskutil list in macOS.","title":"Windows Triple Boot"},{"location":"guides/windows/#introduction","text":"This page is a guide on getting Windows and Linux both installed. Secure Boot Must be disabled from macOS recovery. If you want to be able to choose from macOS, Windows, or Linux in the Startup Manager (the menu you get by holding \u2325 key), goto 'Using seperate EFI partitions'. If you just want to select between Linux and Windows in the GRUB bootloader, goto 'Using the same EFI partition'. The simplist way to triple boot is to install Windows first, and install linux on the same EFI partition, so that the Windows option in Startup Manager will let you pick Linux or Windows. To do that, follow the first set of instructions here.","title":"Introduction"},{"location":"guides/windows/#using-the-same-efi-partition","text":"","title":"Using the same EFI partition"},{"location":"guides/windows/#if-windows-is-installed-first","text":"Install linux normally, with a patched kernel and dkms modules (this is probably done for you if you are using an installer specific to t2 macs). Put your bootloader on /dev/nvme0n1p1 , which should be set to mount at /boot/efi . Once it installs the bootloader, the Windows entry in startup manager will boot linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). Open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader.","title":"If Windows is installed first"},{"location":"guides/windows/#if-linux-is-installed-first","text":"Make sure that your linux partitions are not labled as Microsoft Basic Data , if they are, Bootcamp Assistant will think Windows is already installed. To fix this, go to Linux and do sudo cfdisk /dev/nvme0n1 and change the type of your linux partitions to Linux Filesystem . Install Windows normaly with Bootcamp. Windows will replace your Linux boot option. Boot into macOS. sudo diskutil mount disk0s1 Go to /Volumes/EFI/efi In this folder there will be a Microsoft folder, an Apple folder, one with your distro's name or just GRUB , and one called Boot . The Boot folder will have a file named bootx64.efi , rename this to windows_bootx64.efi Copy the grubx64.efi file in your distro's folder to /Volumes/EFI/efi/Boot/bootx64.efi . The the Windows option in Startup Manager will now boot Linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). In Linux, open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. It may be possible to skip steps 5-8 by doing the following command in macOS: sudo sh -c \"bless --mount /Volumes/EFI --setBoot --file /Volumes/EFI/efi/$(ls /Volumes/EFI/efi|grep -i -e microsoft -e boot -e apple -v)/grubx64.efi --shortform\" This might not prevent step 8 from being needed.","title":"If Linux is installed first"},{"location":"guides/windows/#using-seperate-efi-partitions","text":"","title":"Using seperate EFI partitions"},{"location":"guides/windows/#installing-linux-with-or-without-windows-already-installed","text":"","title":"Installing Linux (With or without Windows already installed)"},{"location":"guides/windows/#in-macos","text":"Create partitions with Disk Utility: Make a 200Mb FAT32 partition, call it something like EFI2 Create your main partition(s) for Linux, make them macOS Extended/HFS+ to stop Bootcamp Installer from thinking they are Windows. These will be erased and reformatted by your installer.","title":"In macOS"},{"location":"guides/windows/#in-your-distros-installer","text":"If you are using an interactive installer: Set the EFI2 partition to be mounted at /boot/efi , don't use the partition labeled EFI located at /dev/nvme0n1p1 , to avoid breaking the Windows bootloader stored there. Your main partition that were formatted as macOS Extended/HFS+ can be mounted at / . If it fails to install the bootloader, open a terminal: Use lsblk or mount to find where your install's root partition is installed chroot $that_partitions_mount_point_here grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. If you are doing it manually: Format the main Linux partition(s) as ext4, btrfs, or whatever you intend to use. Mount your partitions, put the EFI2 one at /boot/efi within your chroot. Install normally up until you install your bootloader, but don't forget to get a patched kernel and the correct dkms modules Within your chroot, do grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux.","title":"In your distro's installer"},{"location":"guides/windows/#installing-windows-when-linux-is-installed","text":"If there are partitions labeled as Microsoft Basic Data , Bootcamp Assistant will think you have Windows installed. Use sudo cfdisk /dev/nvme0n1 to change your Linux partitions to Linux Filesystem or whatever is appropriate. If your second EFI partition is labeled as EFI System , you'll need to use cfdisk again to make it not that, as the Windows installer fails if there are two. Bootcamp should install Windows normally. If you put your Linux bootloader on /dev/nvme0n1p1 , Windows will replace it, and that's why a second EFI partition is ideal.","title":"Installing Windows when Linux is installed"},{"location":"guides/windows/#quality-of-life-things","text":"","title":"Quality of life things"},{"location":"guides/windows/#giving-options-in-macos-startup-manager-custom-icons","text":"Put an icns file with your desired icon in the top directory of the disk that the bootloader of the menu entry is on, and call it .VolumeIcon.icns .","title":"Giving Options in macOS Startup Manager Custom Icons"},{"location":"guides/windows/#setting-your-linux-partitions-as-linux-filesystem-type","text":"Use sudo cfdisk /dev/nvme0n1 and change the type of your Linux partitions. This will show up when you do diskutil list in macOS.","title":"Setting your Linux Partitions as Linux Filesystem type"}]}